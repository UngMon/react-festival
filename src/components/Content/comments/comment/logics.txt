    onKeyDown={(e) => {
              if (!Keys.has(e.key)) return;

              const tag = tagRef.current;
              const TagTextLength = tag?.textContent?.length || 0;
              const prevNode = tag?.previousSibling;
              const nextNode = tag?.nextSibling;

              setTimeout(() => {
                const selection = document.getSelection();
                if (selection?.rangeCount === 0) return;
                const anchorNode = selection!.anchorNode;
                const anchorOffset = selection!.anchorOffset;
                const focusNode = selection!.focusNode;
                const focusOffset = selection!.focusOffset;

                if (
                  focusNode?.parentNode !== tag &&
                  anchorNode?.parentNode !== tag
                )
                  return;

                const range = selection!.getRangeAt(0);

                console.log(
                  selection,
                  selection?.anchorNode,
                  selection?.focusNode
                );

                if (e.key === "Backspace") {
                  if (focusOffset > 0 && focusOffset < TagTextLength)
                    tagRef.current?.remove();
                  return;
                }

                if (e.shiftKey) {

                  let directonOfDrag = "";
                  const position = anchorNode!.compareDocumentPosition(
                    focusNode!
                  );
  
                  if (position & Node.DOCUMENT_POSITION_FOLLOWING) {
                    // anchorNode가 focuseNode 보다 앞에 위치
                    directonOfDrag = "right";
                  } else if (position & Node.DOCUMENT_POSITION_PRECEDING) {
                    // anchorNode가 focuseNode 보다 뒤에 위치
                    directonOfDrag = "left";
                  }

                  const extendSelection = (node: Node, offset: number) => {
                    const nodeText = node.textContent;

            

                  };

                  const collapseSelection = (node: Node, offset: number) => {
                    const nodeText = node.textContent;



                  };

                  const prevNodeText = prevNode?.textContent;
                  const nextNodeText = nextNode?.textContent;

                  if (e.key === "ArrowRight") {

                    if (directonOfDrag === "left") {
                      e.preventDefault();
                      // anchor가 focuse 보다 뒤에 있는 상황이고 텍스트 커서가 focus가 tag 영역에 존재
                      if (prevNodeText && prevNodeText.length > 0)
                        selection?.extend(prevNode, prevNodeText.length - 1);
                      else if (prevNodeText && prevNodeText.length === 0)
                        selection?.extend(prevNode, 0);
                      else if (!prevNode) selection?.extend(tag!, 0);

                      return;
                    }

                    if (
                      (anchorNode !== prevNode &&
                        anchorNode?.parentNode !== tag) ||
                      anchorNode === prevNode
                    ) {
                      if (focusNode?.parentNode !== tag) return;

                      if (nextNodeText && nextNodeText.length > 0)
                        selection?.extend(nextNode, 1);
                      else if (nextNodeText && nextNodeText.length === 0)
                        selection?.extend(nextNode, 0);
                      else if (!nextNode) selection?.extend(tag!, 1);
                    }

                    if (anchorNode?.parentNode === tag) {

                      if (prevNodeText && prevNodeText.length > 0)
                        selection?.collapse(prevNode, prevNodeText.length - 1);
                      else if (prevNodeText && prevNodeText.length === 0)
                        selection?.collapse(prevNode, 0);
                      else if (!prevNode) selection?.collapse(tag!, 0);

                      if (nextNodeText && nextNodeText.length > 0)
                        selection?.extend(nextNode, 1);
                      else if (nextNodeText && nextNodeText.length === 0)
                        selection?.extend(nextNode, 0);
                      else if (!nextNode) selection?.extend(tag!, 1);
                    }

                  } else if (e.key === "ArrowLeft") {
                    if (directonOfDrag === "right") {
                      selection?.collapse(anchorNode, anchorOffset);
                      if (nextNodeText && nextNodeText.length > 0)
                        selection?.extend(nextNode, 1);
                      else if (nextNodeText && nextNodeText.length === 0)
                        selection?.extend(nextNode, 0);
                      else if (!nextNode) selection?.extend(tag!, 1);

                      return;
                    }

                    if (anchorNode === nextNode) {
                      // 2-(1): nextNode에서 왼쪽 방향으로 출발
                      if (focusNode?.parentNode !== tag) return;

                      if (prevNodeText && prevNodeText.length > 0)
                        selection?.extend(prevNode, prevNodeText.length - 1);
                      else if (prevNodeText && prevNodeText.length === 0)
                        selection?.extend(prevNode, 0);
                    }

                    if (anchorNode?.parentNode === tag) {
                      // 2-(3): 태그 바로 우측에서 왼쪽 방향으로 출발

                      if (nextNodeText && nextNodeText.length > 0)
                        selection?.collapse(nextNode, 1);
                      else if (nextNodeText && nextNodeText.length === 0)
                        selection?.collapse(nextNode, 0);
                      else if (!nextNode) selection?.collapse(tag!, 1);

                      if (prevNodeText && prevNodeText.length > 0)
                        selection?.extend(prevNode, prevNodeText.length - 1);
                      else if (prevNodeText && prevNodeText.length === 0)
                        selection?.extend(prevNode, 0);
                      else if (!prevNode) selection?.extend(tag!, 0);
                    }

                    if (anchorNode?.parentNode !== tag) {
                      if (prevNodeText && prevNodeText.length > 0)
                        selection?.extend(prevNode, prevNodeText.length - 1);
                      else if (prevNodeText && prevNodeText.length === 0)
                        selection?.extend(prevNode, 0);
                      else if (!prevNode) selection?.extend(tag!, 0);
                    }
                  }

                  if (e.key === "ArrowUp") {
                    if (directonOfDrag === "left") {
                      // anchorNode가 focousNode 보다 뒤에 위치 즉 아래에서 위로
                      if (anchorNode?.parentNode === tag) {
                        if (nextNodeText && nextNodeText.length > 0)
                          selection?.collapse(nextNode, 1);
                        else if (nextNodeText && nextNodeText.length === 0)
                          selection?.collapse(nextNode, 0);
                        else if (!nextNode) selection?.collapse(tag!, 1);
                      }

                      if (focusNode?.parentNode === tag) {
                        if (prevNodeText && prevNodeText.length > 0)
                          selection?.extend(prevNode, prevNodeText.length - 1);
                        else if (prevNodeText && prevNodeText.length === 0)
                          selection?.extend(prevNode, 0);
                        else if (!prevNode) selection?.extend(tag!, 0);
                      } else selection?.extend(focusNode!, focusOffset);
                    } else if (directonOfDrag === "right") {
                      // anchorNode가 focusNode 보다 앞에 위치 즉 위에서 아래로

                      if (nextNodeText && nextNodeText.length > 0)
                        selection?.extend(nextNode, 1);
                      else if (nextNodeText && nextNodeText.length === 0)
                        selection?.extend(nextNode, 0);
                      else if (!nextNode) selection?.extend(tag!, 1);
                    }
                  } else if (e.key === "ArrowDown") {
                    if (directonOfDrag === "left") {
                      // anchorNode가 focousNode 보다 뒤에 위치 즉 아래에서 위로

                      if (prevNodeText && prevNodeText.length > 0)
                        selection?.extend(prevNode, prevNodeText.length - 1);
                      else if (prevNodeText && prevNodeText.length === 0)
                        selection?.extend(prevNode, 0);
                      else if (!prevNode) selection?.extend(tag!, 0);
                    } else if (directonOfDrag === "right") {
                      // anchorNode가 focusNode 보다 앞에 위치 즉 위에서 아래로

                      if (nextNodeText && nextNodeText.length > 0)
                        selection?.extend(nextNode, 1);
                      else if (nextNodeText && nextNodeText.length === 0)
                        selection?.extend(nextNode, 0);
                      else if (!nextNode) selection?.extend(tag!, 1);
                    }
                  }
                } else {
                  // 단순히 tagRef영역에서 방향키를 누른 경우
                  if (e.key === "ArrowRight") range.setStartAfter(tag!);
                  else if (range.startOffset < TagTextLength) {
                    // up, down, left 키를 누른 경우
                    range.setStartBefore(tag!);
                  }
                  range.collapse(true);
                  selection?.removeAllRanges();
                  selection?.addRange(range);
                }
              }, 0);
            }}